set nocompatible              " required
filetype off                  " required
set hidden
set nowrap        " don't wrap lines
set tabstop=4     " a tab is four spaces
set backspace=indent,eol,start
                    " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set relativenumber "hybrid numbering pattern
set number        " always show line numbers
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                    "    case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to
                    "    shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep
set nobackup
set noswapfile
set pastetoggle=<F2>
set mouse=a
set timeoutlen=500
set guifont=Meslo\ LG\ S\ Regular\ for\ Powerline:h20
"set colorscheme
set  t_Co=256
"colorscheme solarized8_dark_low
"colorscheme github
filetype plugin on
"screen settings
set scrolloff=5

let g:mapleader=','
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" copy from old plugins
Plug 'tmhedberg/SimpylFold'
Plug 'vim-syntastic/syntastic'
Plug 'nvie/vim-flake8'
"Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plug 'kien/ctrlp.vim'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'leafgarland/typescript-vim'
Plug 'henrynewcomer/vim-theme-papaya'
Plug 'cocopon/iceberg.vim'

" Ruby style plugins
Plug 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plug 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plug 'user/L9', {'name': 'newL9'}
Plug 'pangloss/vim-javascript'
Plug 'easymotion/vim-easymotion'
Plug 'garbas/vim-snipmate'
Plug 'tpope/vim-surround'

"Plug 'scrooloose/syntastic'
"Plug 'kien/ctrlp.vim'
"Plug 'Valloric/YouCompleteMe'
Plug 'jelera/vim-javascript-syntax'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Raimondi/delimitMate'
Plug 'marijnh/tern_for_vim'	" Need to completed installation like YCM
"Bundle 'xoria256.vim'
Plug 'vim-scripts/xoria256.vim'
Plug 'flazz/vim-colorschemes'
" vim sessions
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
"jshint plug
"Vim Tmux Navigator
Plug 'christoomey/vim-tmux-navigator'
"Plug 'powerline/powerline'
"Plug 'wookiehangover/jshint.vim'
"Tabularize
Plug 'godlygeek/tabular'
Plug 'gorkunov/smartpairs.vim'
Plug 'tomtom/tcomment_vim'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'
Plug 'vim-ruby/vim-ruby'

" Initialize plugin system
call plug#end()

filetype plugin indent on    " required
let python_highlight_all=1
let python_highlight_all=1
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

set splitbelow
set splitright
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

syntax on
colorscheme desert
"if has('gui_running')
  "set background=dark
  "colorscheme iceberg
"else
  "colorscheme iceberg
"endif

" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za
au BufRead,BufNewFile *.ts   setfiletype typescript
let g:SimpylFold_docstring_preview=1

au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix
au BufNewFile,BufRead *.js, *.ts, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
set encoding=utf-8
set nu
set clipboard=unnamed
map ; :
let g:ag_working_path_mode="r"
"VIM in the Shell
"set editing-mode vi
" Show Invisibles
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!
" use the symbol for tab space as textmate
" Insert spl character CtrlV u00AC for ¬
set listchars=tab:▸\ ,eol:¬ 
" Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59
" line indentation
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv
" Navigating through the open windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" Expand the current folder
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" 2013-14 settings
" ------------------

" Tab Navigations
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
nnoremap  tw  :tabnew<Space> " need to check for conflicts

inoremap kj <Esc>
cnoremap kj <Esc>
" jj 
" SCROLLOFF
" set scrolloff=5
"
 " TABS
 filetype indent on
 set smarttab
 set expandtab
 set smartindent
 set indentkeys+=O,o

 " STATUSLINE
 set laststatus=2

 " SEARCH
 set wrapscan

 set splitright
 set cursorline

 " WILD MENU
 set wildmenu
 set wildignore+=*/.git/*
 set wildignore+=*/cache/*
 set wildignore+=*/compiled/*
 set wildignore+=*/dist/*
 set wildignore+=*/node_modules/*
 set wildignore+=npm-debug.log
 set wildignore+=*.zip
 set wildignore+=*.png,*.jpg,*.gif
 set wildignore+=*.pdf
 set wildignore+=*DS_Store*
 set wildignore+=*.swp
 " vim session settings
 let g:nerdtree_tabs_open_on_gui_startup=0 
 let g:nerdtree_tabs_open_on_new_tab=0
 let g:session_autoload = 'yes'
 let g:session_autosave = 'yes'




" Plugins configurations
"-------------------------- 
syntax enable
set background=dark
"colorscheme solarized
autocmd vimenter * NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
"remap nt NERDTree
nnoremap <c-d> :NERDTreeToggle<cr>
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:airline_powerline_fonts = 1
let g:cssColorVimDoNotMessMyUpdatetime = 1
nmap <F8> :TagbarToggle<CR>

let g:airline#extensions#tabline#enabled = 1
" All of your Plugins must be added before the following line
"Trigger snipmate
 imap <C-J> <Plug>snipMateNextOrTrigger
 smap <C-J> <Plug>snipMateNextOrTrigger
 " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

